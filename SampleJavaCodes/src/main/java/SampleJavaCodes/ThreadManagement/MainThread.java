/* What is a thread? A thread is a process inside the CPU which allows several
tasks to be achieved simultaneously by the CPU. A thread is a small sequence of programmed instructions. 
Threads refer to the highest level of code your processor can execute.
Apparently each CPU has only 2 threads! A process can be assigned to a number of threads, 
which is handled through the scheduler of the operating system.

So basically a thread that is generated by a java program holds the commands and tasks
that are supposed to be executed by CPU. 

The java main thread is the main thread generated by Java, from which other child threads are generated.
    1- It is the thread from which other “child” threads will be spawned.
    2- Often, it must be the last thread to finish execution because it performs various shutdown actions.

Although the main thread is created automatically when your program is
started, it can be controlled through a Thread object. To do so, you must obtain
a reference to it by calling the method currentThread( ), which is a public
static member of Thread. 

When we say current thread, what do we mean exactly? Because we know that there can be
several threads running even simultaneously?

Why do we access currentThread() and sleep() through static methods? Because we know each code is 
executed in which part of the thread. Hence, a static method is needed, which would always access
the same thread. What I mean is that currentThread in the main method would never return another 
thread. Also, when I put it to sleep, it will never put another thread to sleep.

*/
package SampleJavaCodes.ThreadManagement;

class ThreadDemo{
    public static void main(String[] args) {
        Thread thread = Thread.currentThread();

        System.out.println(thread.getName());   // This is the name of the thread.
        System.out.println(thread);   // This is the name of the thread.

        thread.setName("Main thread");
        System.out.println(thread.getName());   // This is the name of the thread.
        System.out.println(thread);   // This is the name of the thread.

        try{
            for (int i = 0; i < 5; i++){
                System.out.println(i);
                Thread.sleep(5000);       // The method is accessed in an static fashion.
            }
        }
        catch(InterruptedException e){
            // This may happen if another thread tries to break the sleep of this thread.
            System.out.println("Main thread interrupted" + e.getMessage());
        }
    }
}